buildscript {
    apply from: rootProject.file('dependencies.gradle')
    repositories {
        jcenter()
    }
    dependencies {
        classpath deps.build.androidPlugin
        classpath deps.build.androidAptPlugin
        classpath deps.build.butterKnifePlugin
        classpath deps.build.retrolambdaPlugin
        classpath deps.build.sqlDelightPlugin
    }
}

allprojects { project ->
    project.apply from: rootProject.file('dependencies.gradle')
    repositories {
        jcenter()
    }
}

subprojects { project ->
    afterEvaluate {
        if (project.plugins.hasPlugin('java')) {
            addCommonConfigurationForJavaModules(project)
        } else if (project.plugins.hasPlugin('com.android.application')
                || project.plugins.hasPlugin('com.android.library')) {
            addCommonConfigurationForAndroidModules(project)
        }
    }
}

def addCommonConfigurationForJavaModules(Project project) {
    if (project.plugins.hasPlugin('me.tatarka.retrolambda')) {
        project.sourceCompatibility = JavaVersion.VERSION_1_8
        project.targetCompatibility = JavaVersion.VERSION_1_8
    } else {
        project.sourceCompatibility = JavaVersion.VERSION_1_7
        project.targetCompatibility = JavaVersion.VERSION_1_7
    }
}

def addCommonConfigurationForAndroidModules(Project project) {
    project.android {
        compileSdkVersion config.build.compileSdk
        buildToolsVersion config.build.buildTools

        defaultConfig {
            minSdkVersion config.build.minSdk
            targetSdkVersion config.build.targetSdk
            vectorDrawables.useSupportLibrary = true
            versionCode 1
            versionName "1.0"
        }

        compileOptions {
            if (project.plugins.hasPlugin('me.tatarka.retrolambda')) {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            } else {
                sourceCompatibility JavaVersion.VERSION_1_7
                targetCompatibility JavaVersion.VERSION_1_7
            }
        }
    }
    if (project.plugins.hasPlugin('com.android.application')) {
        project.android {
            signingConfigs {
                debug {
                    storeFile project.rootProject.file('config/signing/debug.keystore')
                }
            }
            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                }
                release {
                    signingConfig signingConfigs.debug
                }
            }
        }
    }
}

// Workaround to make gradle source tasks in buck run on travis
if (project.file("buildSrc").exists()) {
    apply plugin: 'com.uber.okbuck'

    okbuck {
        buildToolVersion config.build.buildTools
        target "android-${config.build.compileSdk}"

        primaryDexPatterns = [
                'app': [
                        '^com/uber/okbuck/example/AppShell^',
                        '^com/uber/okbuck/example/BuildConfig^',
                        '^android/support/multidex/',
                        '^com/facebook/buck/android/support/exopackage/',
                        '^com/github/promeg/xlog_android/lib/XLogConfig^',
                        '^com/squareup/leakcanary/LeakCanary^',
                        '^com/uber/okbuck/example/common/Calc^',
                        '^com/uber/okbuck/example/common/BuildConfig^',
                ]
        ]
        exopackage = [
                'appDevDebug': true
        ]
        appLibDependencies = [
                'appProd': [
                        'buck-android-support',
                        'com.android.support:multidex',
                        'libraries/javalibrary:main',
                        'libraries/common:paidRelease',
                ],
                'appDev' : [
                        'buck-android-support',
                        'com.android.support:multidex',
                        'libraries/javalibrary:main',
                        'libraries/common:freeDebug',
                ],
                'appDemo': [
                        'buck-android-support',
                        'com.android.support:multidex',
                        'libraries/javalibrary:main',
                        'libraries/common:paidRelease',
                ]
        ]
        buckProjects = project.subprojects.findAll { it.name != "plugin" }

//        intellij {
//            sources = true
//        }

//        test {
//            espresso = true
//            robolectric = true
//        }

        gradleGen {
            options = ["--offline", "-Dorg.gradle.configureondemand=true", "-Dorg.gradle.parallel=true"]
        }
    }

    afterEvaluate {
        tasks.getByName("okbuck").doLast {
            "zip -d .okbuck/cache/org.hamcrest.hamcrest-core-1.3.jar LICENSE.txt".execute()
            "zip -d .okbuck/cache/org.hamcrest.hamcrest-library-1.3.jar LICENSE.txt".execute()
            "zip -d .okbuck/cache/org.hamcrest.hamcrest-integration-1.3.jar LICENSE.txt".execute()
        }
    }
}
