package com.uber.okbuck

import com.uber.okbuck.config.BUCKFile
import com.uber.okbuck.core.dependency.DependencyCache
import com.uber.okbuck.core.util.FileUtil
import com.uber.okbuck.extension.GradleGenExtension
import com.uber.okbuck.extension.OkBuckExtension
import com.uber.okbuck.generator.BuckFileGenerator
import org.apache.commons.io.IOUtils
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.logging.Logger

class OkBuckGradlePlugin implements Plugin<Project> {

    static final String OKBUCK = "okbuck"
    static final String BUCK = "BUCK"
    static final String GRADLE_GEN = "gradleGen"
    static final String DEFAULT_CACHE_PATH = "okbuck/cache"
    static final String CONFIGURATION_POST_PROCESS = "postProcess"

    static final String GROUP = "okbuck"

    static DependencyCache depCache
    static Logger LOGGER

    void apply(Project project) {
        LOGGER = project.logger
        OkBuckExtension okbuck = project.extensions.create(OKBUCK, OkBuckExtension, project)
        okbuck.extensions.create(GRADLE_GEN, GradleGenExtension, project)

        Task okBuck = project.task(OKBUCK)
        okBuck.setGroup(GROUP)
        okBuck.setDescription("Generate BUCK files")
        okBuck.outputs.upToDateWhen { false }

        project.configurations.maybeCreate(CONFIGURATION_POST_PROCESS)

        project.afterEvaluate {
            /*
            Task okBuckClean = project.tasks.create(OKBUCK_CLEAN, OkBuckCleanTask, {
                dir = project.projectDir.absolutePath
                includes = wrapper.remove
                excludes = wrapper.keep
            })
            okBuckClean.setGroup(GROUP)
            okBuckClean.setDescription("Delete configuration files generated by OkBuck")

            okBuck.dependsOn(okBuckClean)
                        */
            okBuck << {
                generate(project)
            }

            depCache = new DependencyCache(project, DEFAULT_CACHE_PATH, true, true, false)
        }
    }

    private static generate(Project project) {
        OkBuckExtension okbuck = project.okbuck

        File workspaceFile = project.file("WORKSPACE")
        if (!workspaceFile.exists()) {
            FileUtil.copyResourceToProject("bazel/WORKSPACE", workspaceFile)
        }

        // generate BUCK file for each project
        Map<Project, BUCKFile> buckFiles = BuckFileGenerator.generate(project)

        buckFiles.each { Project subProject, BUCKFile buckFile ->
            PrintStream buckPrinter = new PrintStream(subProject.file(BUCK))
            buckFile.print(buckPrinter)
            IOUtils.closeQuietly(buckPrinter)
        }
    }
}
